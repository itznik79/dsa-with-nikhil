Kadane’s Algorithm is a dynamic programming algorithm used to find the maximum sum contiguous subarray within a one-dimensional array of numbers (both positive and negative).

At each step:

    Add the current element to currentSum.
    If currentSum becomes negative, reset it to 0 (because a negative sum would reduce the total sum of any future subarray).
    Update maxSum if currentSum is greater than maxSum.

Use Cases-
    Maximum profit problems (stock trading, sales)
    Subarray sum optimization
    Dynamic programming practice
    Finding the largest sum in a sequence of numbers

Approaches for the same-
    a) brute force- 
        Logic:

            Iterate over all possible subarrays
            Calculate sum of each subarray
            Track the maximum sum

            Time Complexity: O(n³)
            Space Complexity: O(1)

    b) 2. Improved Approach (2 Loops)

        Logic:

            Iterate over all starting points of subarrays
            Keep running sum for subarrays starting from that index
            Update maximum sum

            Time Complexity: O(n²)
            Space Complexity: O(1)

    c) Kadan's-
        Logic:
            Initialize currentSum = 0 and maxSum = INT_MIN
            Iterate through array:
            currentSum += arr[i]
                If currentSum > maxSum, update maxSum
                If currentSum < 0, reset currentSum = 0;
        Intuition:
            If the running sum becomes negative, it will reduce the sum of any future subarray, so we reset it.

        Time Complexity: O(n)
        Space Complexity: O(1)



Dry Run Table
i	arr[i]	currentSum	maxSum	Action
0	-2	-2 → 0	-∞ → 0	currentSum < 0 → reset
1	3	3	0 → 3	currentSum > maxSum → update
2	2	5	3 → 5	currentSum > maxSum → update
3	-1	4	5	currentSum remains

Answer: 5